generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Task {
  id          String   @id @default(uuid())
  description String
  taskCodeId  String
  taskCode    TaskCode @relation(fields: [taskCodeId], references: [id])

  startDate DateTime
  endDate   DateTime

  status TASK_STATUS

  createdById String
  createdBy   User   @relation("TaskCreatedBy", fields: [createdById], references: [id])

  assignedToUserId String?
  assignedToUser   User?   @relation("AssignedToUser", fields: [assignedToUserId], references: [id])

  assignedToBatchId String?
  assignedToBatch   Batch?  @relation("AssignedToBatch", fields: [assignedToBatchId], references: [id])

  assignedToAcademyId String?
  assignedToAcademy   Academy? @relation("AssignedToAcademy", fields: [assignedToAcademyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tasks")
}

model TaskCode {
  id          String  @id @default(uuid())
  code        String  @unique
  description String?

  tasks Task[]

  @@map("task_codes")
}

enum TASK_STATUS {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model User {
  id       String      @id @default(uuid())
  email    String      @unique
  password String?
  role     ROLE
  subRole  COACH_ROLE?

  code String

  hasPassword Boolean @default(false)

  profile Profile?

  coachOfBatches   Batch[]   @relation("BatchCoaches")
  studentOfBatches Batch[]   @relation("BatchStudents")
  adminOfAcademies Academy[] @relation("AcademyAdmins")

  subscriptions Subscription[]

  studentGoals       StudentWeeklyGoal[]
  invitationsCreated Invitation[]

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  friends         User[] @relation("UserFriends")
  friendRelations User[] @relation("UserFriends")

  notifications Notification[]

  channels Channel[] @relation("ChannelMembers")

  ChannelMessages ChannelMessage[]

  assignedTasks Task[] @relation("AssignedToUser")
  createdTasks  Task[] @relation("TaskCreatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status USER_STATUS @default(ACTIVE)

  @@map("users")
}

model Profile {
  id            String    @id @default(uuid())
  firstName     String
  middleName    String?
  lastName      String
  dob           DateTime?
  phoneNumber   String?
  addressLine1  String?
  addressLine2  String?
  city          String?
  state         String?
  country       String?
  parentName    String?
  parentEmailId String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Academy {
  id String @id @default(uuid())

  name String

  admins  User[]  @relation("AcademyAdmins")
  batches Batch[]

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  subscriptions  Subscription[]
  purchasedPlans PurchasedPlan[]

  status        USER_STATUS @default(ACTIVE)
  // New Relation
  assignedTasks Task[]      @relation("AssignedToAcademy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academies")
}

model Batch {
  id String @id @default(uuid())

  batchCode   String
  description String?

  studentCapacity Int
  warningCutoff   Int
  currentClass    String
  startLevel      String
  currentLevel    String

  academyId String
  academy   Academy @relation(fields: [academyId], references: [id])

  coaches  User[] @relation("BatchCoaches")
  students User[] @relation("BatchStudents")

  seasonalGoals SeasonalGoal[]
  monthlyGoals  MonthlyGoal[]
  weeklyGoals   WeeklyGoal[]

  // New Relation
  assignedTasks Task[] @relation("AssignedToBatch")

  startDate DateTime

  channels Channel[]

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("batches")
}

model Invitation {
  id String @id @default(uuid())

  type  INVITATION_TYPE
  email String          @unique

  data      Json?
  expiresAt DateTime?

  status INVITATION_STATUS @default(PENDING)

  version Int @default(0)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invitations")
}

model Code {
  id    String @id @default(uuid())
  email String

  code String

  expiresAt DateTime

  type CODE_TYPE

  @@map("codes")
}

model Subscription {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  academyId String?
  academy   Academy? @relation(fields: [academyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Plan {
  id   String @id @default(uuid())
  name String

  type PLAN_TYPE

  priceMonthly Float
  priceYearly  Float?

  academies      Academy[]
  subscriptions  Subscription[]
  purchasedPlans PurchasedPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Coupon {
  id String @id @default(uuid())

  code String @unique

  discount Float
  maxUses  Int

  expiresAt DateTime?

  purchasedPlans PurchasedPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

model PurchasedPlan {
  id String @id @default(uuid())

  academyId String
  academy   Academy @relation(fields: [academyId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchasedplans")
}

model Message {
  id             String   @id @default(uuid())
  senderId       String
  receiverId     String?
  content        String
  isRead         Boolean  @default(false)
  isReplyAllowed Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sender   User  @relation("SentMessages", fields: [senderId], references: [id])
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id])

  batchId String?
  batch   Batch?  @relation(fields: [batchId], references: [id])

  @@map("messages")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model FriendRequest {
  id         String                @id @default(uuid())
  senderId   String
  receiverId String
  status     FRIEND_REQUEST_STATUS @default(PENDING)
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt

  sender   User @relation("SentFriendRequests", fields: [senderId], references: [id])
  receiver User @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  @@map("friend_requests")
}

model Channel {
  id          String   @id @default(uuid())
  name        String
  isBroadcast Boolean  @default(false)
  batchId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  batch   Batch? @relation(fields: [batchId], references: [id])
  members User[] @relation("ChannelMembers")

  messages ChannelMessage[]

  @@map("channels")
}

model ChannelMessage {
  id        String   @id @default(uuid())
  channelId String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  channel Channel @relation(fields: [channelId], references: [id])
  sender  User    @relation(fields: [senderId], references: [id])

  @@map("channel_messages")
}

model StudentWeeklyGoal {
  id            String   @id @default(uuid())
  studentId     String
  weeklyGoalId  String
  puzzlesTarget Int?     @default(0)
  puzzlesSolved Int?     @default(0)
  puzzlesPassed Int?     @default(0)
  isCustom      Boolean  @default(false)
  createdAt     DateTime @default(now())

  student    User       @relation(fields: [studentId], references: [id])
  weeklyGoal WeeklyGoal @relation(fields: [weeklyGoalId], references: [id])

  @@map("studentweeklygoals")
}

model WeeklyGoal {
  id        String   @id @default(uuid())
  code      String
  startDate DateTime
  endDate   DateTime

  targetId String
  target   Target @relation(fields: [targetId], references: [id])

  monthlyGoalId String
  monthlyGoal   MonthlyGoal @relation(fields: [monthlyGoalId], references: [id])

  batchId String
  batch   Batch  @relation(fields: [batchId], references: [id])

  studentGoals StudentWeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("weeklygoals")
}

model Target {
  id         String @id @default(uuid())
  noOfGames  Int
  minReviews Int
  midReviews Int
  maxReviews Int

  weeklyGoals WeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("targets")
}

model MonthlyGoal {
  id        String   @id @default(uuid())
  code      String
  startDate DateTime
  endDate   DateTime

  seasonalGoalId String
  seasonalGoal   SeasonalGoal @relation(fields: [seasonalGoalId], references: [id])

  batchId String
  batch   Batch  @relation(fields: [batchId], references: [id])

  weeklyGoals WeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monthlygoals")
}

model SeasonalGoal {
  id        String   @id @default(uuid())
  code      String
  startDate DateTime
  endDate   DateTime

  batchId String
  batch   Batch  @relation(fields: [batchId], references: [id])

  monthlyGoals MonthlyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seasonalgoals")
}

enum GOAL_CATEGORY {
  GAMES
  PUZZLES
}

enum PLAN_TYPE {
  ACADEMY
  SUBSCRIBER
}

enum CODE_TYPE {
  FORGOT_PASSWORD
  LOGIN_WITHOUT_PASSWORD
}

enum INVITATION_TYPE {
  CREATE_ACADEMY
  BATCH_STUDENT
  BATCH_COACH
  USER_INVITATION
}

enum INVITATION_STATUS {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum ROLE {
  SUPER_ADMIN
  ADMIN
  COACH
  STUDENT
  SUBSCRIBER
}

enum COACH_ROLE {
  HEAD_COACH
  SENIOR_COACH
  JUNIOR_COACH
  PUZZLE_MASTER
  PUZZLE_MASTER_SCHOLAR
}

enum FRIEND_REQUEST_STATUS {
  PENDING
  ACCEPTED
  REJECTED
}

enum USER_STATUS {
  ACTIVE
  INACTIVE
}

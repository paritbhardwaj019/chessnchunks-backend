generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String      @id @default(uuid())
  email    String      @unique
  password String?
  role     ROLE
  subRole  COACH_ROLE?

  profile Profile?

  coachOfBatches   Batch[]   @relation("BatchCoaches")
  studentOfBatches Batch[]   @relation("BatchStudents")
  adminOfAcademies Academy[] @relation("AcademyAdmins")

  invitationsCreated Invitation[]

  subscriptions Subscription[]
  studentGoals  StudentWeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Profile {
  id        String @id @default(uuid())
  firstName String
  lastName  String

  userId String? @unique

  user User? @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Academy {
  id String @id @default(uuid())

  name String

  admins  User[]  @relation("AcademyAdmins")
  batches Batch[]

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  subsriptions   Subscription[]
  purchasedPlans PurchasedPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("academies")
}

model Batch {
  id String @id @default(uuid())

  batchCode   String
  description String?

  studentCapacity Int
  warningCutoff   Int
  currentClass    String
  startLevel      String
  currentLevel    String

  academyId String
  academy   Academy @relation(fields: [academyId], references: [id])

  coaches  User[] @relation("BatchCoaches")
  students User[] @relation("BatchStudents")

  goals SeasonalGoal[]

  startDate DateTime
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("batches")
}

model Invitation {
  id String @id @default(uuid())

  type  INVITATION_TYPE
  email String          @unique

  data      Json?
  expiresAt DateTime?

  status INVITATION_STATUS @default(PENDING)

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("invitations")
}

model Code {
  id    String @id @default(uuid())
  email String

  code String

  expiresAt DateTime

  type CODE_TYPE

  @@map("codes")
}

model Subscription {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  academyId String?
  academy   Academy? @relation(fields: [academyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Plan {
  id   String @id @default(uuid())
  name String

  type PLAN_TYPE

  priceMonthly Float
  priceYearly  Float?

  academies     Academy[]
  subscriptions Subscription[]
  purchasedPlan PurchasedPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("plans")
}

model Coupon {
  id String @id @default(uuid())

  code String @unique

  discount Float
  maxUses  Int

  expiresAt DateTime?

  purchasedPlans PurchasedPlan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coupons")
}

model PurchasedPlan {
  id String @id @default(uuid())

  academyId String
  academy   Academy @relation(fields: [academyId], references: [id])

  planId String
  plan   Plan   @relation(fields: [planId], references: [id])

  couponId String?
  coupon   Coupon? @relation(fields: [couponId], references: [id])

  totalPrice Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchasedplans")
}

model StudentWeeklyGoal {
  id            String     @id @default(uuid())
  studentId     String
  weeklyGoalId  String
  puzzlesTarget Int
  puzzlesSolved Int
  puzzlesPassed Int
  student       User       @relation(fields: [studentId], references: [id])
  weeklyGoal    WeeklyGoal @relation(fields: [weeklyGoalId], references: [id])
  createdAt     DateTime   @default(now())
  isCustom      Boolean    @default(false)

  @@map("studentweeklygoals")
}

model WeeklyGoal {
  id            String              @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  
  targetId      String
  target        Target              @relation(fields: [targetId], references: [id])

  monthlyGoalId String
  monthlyGoal   MonthlyGoal         @relation(fields: [monthlyGoalId], references: [id])
  studentGoals  StudentWeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("weeklygoals")
}

model Target {
  id            String              @id @default(uuid())
  noOfGames     Int
  minReviews    Int
  midReviews    Int
  maxReviews    Int

  weeklyGoals   WeeklyGoal[]        

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthlyGoal {
  id             String       @id @default(uuid())
  startDate      DateTime
  endDate        DateTime
  seasonalGoalId String
  seasonalGoal   SeasonalGoal @relation(fields: [seasonalGoalId], references: [id])
  weeklyGoals    WeeklyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monthlygoals")
}

model SeasonalGoal {
  id String @id @default(uuid())

  startDate         DateTime
  endDate           DateTime

  batchId           String
  batch             Batch         @relation(fields: [batchId], references: [id])
  monthlyGoals      MonthlyGoal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("seasonalgoals")
}

enum GOAL_CATEGORY {
  GAMES
  PUZZLES
}

enum PLAN_TYPE {
  ACADEMY
  SUBSCRIBER
}

enum CODE_TYPE {
  FORGOT_PASSWORD
  LOGIN_WITHOUT_PASSWORD
}

enum INVITATION_TYPE {
  CREATE_ACADEMY
  BATCH_STUDENT
  BATCH_COACH
  USER_INVITATION
}

enum INVITATION_STATUS {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum ROLE {
  SUPER_ADMIN
  ADMIN
  COACH
  STUDENT
  SUBSCRIBER
}

enum COACH_ROLE {
  HEAD_COACH
  SENIOR_COACH
  JUNIOR_COACH
  PUZZLE_MASTER
  PUZZLE_MASTER_SCHOLAR
}
